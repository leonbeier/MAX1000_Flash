/*
    Copyright (c) 2019 Protop Solutions UG. All right reserved.
    
    Permission is hereby granted, free of charge, to any person obtaININg a copy of
    this hdl code and associated documentation files (the "HDL Code"), to deal IN the
    HDL Code withOUT restriction, INcludINg withOUT limitation the rights to use,
    copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
    HDL Code, and to permit persons to whom the HDL Code is furnished to do so,
    subject to the followINg conditions:

    The above copyright notice and this permission notice shall be INcluded IN all
    copies or substantial portions of the HDL Code.

    THE HDL Code IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
    AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
    WITH THE HDL Code OR THE USE OR OTHER DEALINGS IN THE HDL Code.

    1. Hardware Project:
    -Add NewComponent of NIOSDuINo_Processor IN your code
    -Right click the name "NIOSDuINo_Processor" of the NewComponent and click on Create Signals
    -Compile the project (and connect the signals with the FPGA I/Os)

    2. Software Project:
    -Click on Tools/New NIOSDuINo Project and the Software folder is created IN the project

    3. Program Software:
    -Go to Software/NIOSDuINo/NIOSDuINo.cpp and program your code
    -You can use the ArduINo libraries and you can fINd more INformation here: https://github.com/dimag0g/nios_duINo
    -Click on NIOS/NIOS II Make and Download

    For JTAG UART:
    -Click on NIOS/NIOS II JTAG TermINal
    For Standard UART:
    -NIOS/BSP Editor -> select uart_0 for stdIN/stdOUT
    -Use the Serial Monitor with the baudrate you selected when creatINg the processor (9600 as default)

    4. Non-Volatile ProgrammINg:
    -Test your code
    -Use an UART INterface INstead of JTAG UART: NIOS/BSP Editor -> select uart_0 for stdIN/stdOUT
    -Right click the Project and click on "Make Targets"
    -Double click IN your project Libraries/NIOSDuINo/NIOSDuINo_Core.qsys
    -Click on fINish, close the wINdow and compile the VHDP project agaIN
    -If you program the FPGA with ProgrammINg Mode 2, the software and hardware is saved on the FPGA
 */

Component NIOSDuino_Processor
(
    --NIOSDuINo Onboard
    Reset                      : IN    STD_LOGIC := '1';
    sdram_addr                 : OUT   STD_LOGIC_VECTOR(11 downto 0);
    sdram_ba                   : OUT   STD_LOGIC_VECTOR(1 downto 0);
    sdram_cas_n                : OUT   STD_LOGIC;
    sdram_cke                  : OUT   STD_LOGIC;
    sdram_cs_n                 : OUT   STD_LOGIC;
    sdram_dq                   : INOUT STD_LOGIC_VECTOR(15 downto 0) := (others => 'X');
    sdram_dqm                  : OUT   STD_LOGIC_VECTOR(1 downto 0);
    sdram_ras_n                : OUT   STD_LOGIC;
    sdram_we_n                 : OUT   STD_LOGIC;
    sdram_clk_clk              : OUT   STD_LOGIC;
    qspi_dclk                  : OUT   STD_LOGIC;                                        -- dclk
    qspi_ncs                   : OUT   STD_LOGIC;                                        -- ncs
    qspi_data                  : INOUT STD_LOGIC_VECTOR(3 downto 0)  := (others => 'X'); -- data
    --NIOSDuINo External
    pio_export                 : INOUT STD_LOGIC_VECTOR(15 downto 0) := (others => 'X');
    uart_rxd                   : IN    STD_LOGIC := 'X';
    uart_txd                   : OUT   STD_LOGIC
)
{
    Connections
    {
        CLK            => CLK,
        Reset          => BTN_1,
        sdram_addr[0]  => SDRAM_ADD_1,
        sdram_addr[1]  => SDRAM_ADD_2,
        sdram_addr[2]  => SDRAM_ADD_3,
        sdram_addr[3]  => SDRAM_ADD_4,
        sdram_addr[4]  => SDRAM_ADD_5,
        sdram_addr[5]  => SDRAM_ADD_6,
        sdram_addr[6]  => SDRAM_ADD_7,
        sdram_addr[7]  => SDRAM_ADD_8,
        sdram_addr[8]  => SDRAM_ADD_9,
        sdram_addr[9]  => SDRAM_ADD_10,
        sdram_addr[10] => SDRAM_ADD_11,
        sdram_addr[11] => SDRAM_ADD_12,
        sdram_addr[12] => SDRAM_ADD_13,
        sdram_ba[0]    => SDRAM_BAN_1,
        sdram_ba[1]    => SDRAM_BAN_2,
        sdram_cas_n    => SDRAM_CAS,
        sdram_cs_n     => SDRAM_CSE,
        sdram_cke      => SDRAM_CKE,
        sdram_clk_clk  => SDRAM_CLK,
        sdram_ras_n    => SDRAM_RAS,
        sdram_we_n     => SDRAM_WEN,
        sdram_dqm[0]   => SDRAM_DQM_1,
        sdram_dqm[1]   => SDRAM_DQM_2,
        sdram_dq[0]    => SDRAM_DAT_1,
        sdram_dq[1]    => SDRAM_DAT_2,
        sdram_dq[2]    => SDRAM_DAT_3,
        sdram_dq[3]    => SDRAM_DAT_4,
        sdram_dq[4]    => SDRAM_DAT_5,
        sdram_dq[5]    => SDRAM_DAT_6,
        sdram_dq[6]    => SDRAM_DAT_7,
        sdram_dq[7]    => SDRAM_DAT_8,
        sdram_dq[8]    => SDRAM_DAT_9,
        sdram_dq[9]    => SDRAM_DAT_10,
        sdram_dq[10]   => SDRAM_DAT_11,
        sdram_dq[11]   => SDRAM_DAT_12,
        sdram_dq[12]   => SDRAM_DAT_13,
        sdram_dq[13]   => SDRAM_DAT_14,
        sdram_dq[14]   => SDRAM_DAT_15,
        sdram_dq[15]   => SDRAM_DAT_16,
        uart_rxd       => UART_TXD,
        uart_txd       => UART_RXD,
        qspi_dclk      => Flash_1,
        qspi_ncs       => Flash_4,
        qspi_data(0)   => Flash_2,
        qspi_data(1)   => Flash_3,
        qspi_data(2)   => Flash_6,
        qspi_data(3)   => Flash_5,

        pio_export,
    }
    
    
    SIGNAL reset_reset_n : STD_LOGIC;
    reset_reset_n <= Reset;
    
    AttributeDeclaration
    {
        VHDL
        {
            component NIOSDuINo_Core
            port (
                clk_IN_clk            : IN    STD_LOGIC                     := '0';             --         clk_IN.clk
                pio_export            : INOUT STD_LOGIC_VECTOR(15 downto 0) := (others => '0'); --        pio_led.export
                reset_reset_n         : IN    STD_LOGIC                     := '1';             --          reset.reset_n
                sdram_addr            : OUT   STD_LOGIC_VECTOR(11 downto 0);                    --          sdram.addr
                sdram_ba              : OUT   STD_LOGIC_VECTOR(1 downto 0);                     --               .ba
                sdram_cas_n           : OUT   STD_LOGIC;                                        --               .cas_n
                sdram_cke             : OUT   STD_LOGIC := '1';  --NOT USED WITH CORE MAX10
                sdram_cs_n            : OUT   STD_LOGIC := '0';  --NOT USED WITH CORE MAX10
                sdram_dq              : INOUT STD_LOGIC_VECTOR(15 downto 0) := (others => '0'); --               .dq
                sdram_dqm             : OUT   STD_LOGIC_VECTOR(1 downto 0);                     --               .dqm
                sdram_ras_n           : OUT   STD_LOGIC;                                        --               .ras_n
                sdram_we_n            : OUT   STD_LOGIC;                                        --               .we_n
                sdram_clk_clk         : OUT   STD_LOGIC;                                        --      sdram_clk.clk
                uart_rxd              : IN    STD_LOGIC                     := '0';             --           uart.rxd
                uart_txd              : OUT   STD_LOGIC;                                        -- txd
                qspi_dclk             : OUT   STD_LOGIC;                                        -- dclk
                qspi_ncs              : OUT   STD_LOGIC;                                        -- ncs
                qspi_data             : INOUT STD_LOGIC_VECTOR(3 downto 0)  := (others => 'X')  -- data
            );
            end component;
        }
    }
    
    VHDL
    {
        u1: NIOSDuINo_Core port map
        (
            clk_IN_clk            => CLK,
            pio_export            => pio_export,
            reset_reset_n         => reset_reset_n,
            sdram_addr            => sdram_addr,
            sdram_ba              => sdram_ba,
            sdram_cas_n           => sdram_cas_n,
            sdram_cke             => sdram_cke,
            sdram_cs_n            => sdram_cs_n,
            sdram_dq              => sdram_dq,
            sdram_dqm             => sdram_dqm,
            sdram_ras_n           => sdram_ras_n,
            sdram_we_n            => sdram_we_n,
            sdram_clk_clk         => sdram_clk_clk,
            uart_rxd              => uart_rxd,
            uart_txd              => uart_txd
        );
    }
}
